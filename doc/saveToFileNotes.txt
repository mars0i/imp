Options for saving data to files for later retrieval

csv
	works with non-ocaml
	Too verbose, and 2D is awkward.
	Only for real interchange when needed.

OCaml marshal
	very compact, very easy to use.
	might not work across OCaml versions or even new libs.
	works only with ocaml

yojson (in opam) (based on atdgen)
	works with non-ocaml
	better than csv in that it's not 2D, but still it's verbose text
There are also some other json tools in opam.

biniou (in opam) (based on atdgen)
	binary, faster than json
	won't work with non-ocaml

msgpck (in opam)
	binary
	not very nicely documented (see opam for any description at all)
	probably won't work with non-ocaml at this point

hdf5 using hdf5-ocaml (in opam)
	binary
	a scientific large-data standard
	slightly non-trivial to implement for embedded strus?
	clojure has libs for it
		but clj-hdf5 hasn't been touched in five years
		and thinktopic/think.hdf5 is documentation-free
		no mention of hdf5 in core.matrix
	R has libs for it


--------------

hdf5 ocaml lib is moribund and only half-featured at this point.
Convenient use for me is broken.

piqi looks good for OCaml serialization.
However, there are complaints about it being possibly buggy and about
how the code is written.

However, I think I should also have a csv format available. 
Simple plan:

Save fitnesses that generated the data.
Maybe store N or 2N.  Not strictly necessary.
Save only pairs (or more) of bounds vectors at t.
Store t.
Maybe store an index for each vector at t, with 0 for lower and 1 for
upper.

Global config file, with columns:
N, wAA, wAB, wBB
and usually two rows.  Might as well just repeat the N.

Data file, with columns:

"generation", "vectorid" (the within-generation index), "0", "1", ..., 2N
