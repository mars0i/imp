9/2017

Version up to 9/5/2017:

N=300
MBA bytecode:
	tighten both initial mats: 9.1 secs
	calc second lo and hi (i.e. first after initial: 243 secs
MBA native executable:
	tighten: 3.6 secs
	2nd lo, hi: 88.9 secs ~= 1.5 mins
	(only slightly faster with 9/6 version, which is what I expected.)

N=500
MBA native executable:
	tighten: 16.3 secs
	2nd lo, hi: 488.9 secs ~= 8.15 mins

N=1000
MBA native executable:
	tighten: 130.4 secs ~= 2.2 mins
	2nd lo, hi: : 5354 secs ~= 89.2 mins

N=1000
MBP, native executable:
	tighten:  36.25 secs
	calc #2 lo, hi from initial p, q (=#1): 1864.94 secs ~= 31 minutes

(Wow. 30 minutes for one N=1000 iteration with native code on my faster
machine.  Wow.  I wonder if it gets faster as it converges.  Probably
not much.  That means about 24 hours for close to 50 iterations.)

------------

MBA after introducing Parmap:

~/docs/src/ml/imp(master)$ date; time _build/default/src/bin/setchaintest.exe 1000 ; date
Wed Sep  6 23:05:47 CDT 2017
Top level run command: N=1000
make initial interval: 2.463601s
tighten it: 138.793038s
calculate lo2, hi2: 0.219433s
141.477390s
real	50m30.176s
user	90m10.341s
sys	0m34.332s
Wed Sep  6 23:56:17 CDT 2017
[NOTE: This is not miraculous, but it is a huge speedup.]

[It's wierd that the internal times are 2 mins 20 secs total, but the
run time is 50 minutes, but still--without parmap I can't really
run N=1000 on the MBA at all.]

~/docs/src/ml/imp(master)$ time _build/default/src/bin/setchaintest.exe 500
N=500
make initial interval: cpu: 0.622555s wall: 0.570224s
tighten it: cpu: 16.674154s wall: 17.782483s
calculate lo2, hi2: cpu: 0.099781s wall: 273.144847s
cpu: 17.397236s wall: 291.498261s
real	4m51.542s
user	8m13.447s
sys	0m3.768s
[NOTE: This is not miraculous, but it is close to a 2X speedup.]

------------
MBA with Parmap:

~/docs/src/ml/imp(master)$ _build/default/src/bin/setchaintest.exe 500
N=500

make initial interval: cpu: 0.666213s wall: 0.528893s
tighten it: cpu: 16.157421s wall: 16.369767s

calculate lo2, hi2 using Parmap, using make_bounds_mat4: cpu: 0.075795s wall: 266.586505s

calculate lo2, hi2 without Parmap using make_bounds_mat3: cpu: 462.568765s wall: 464.309224s

Results of both calculations are the same? true
Ratio between make_bounds_mat4 and make_bounds_mat3 wall times ~= 1.741678

Extra check: calculate lo2, hi2 without Parmap using (earlier) make_bounds_mat1: cpu: 453.482607s wall: 455.165596s

Results are the same? true

Overall time:
cpu: 932.958165s wall: 1202.967443s

------------
MBP with Parmap:

~/docs/src/ml/imp(master)$ date; time _build/default/src/bin/setchaintest.exe 1000; date
Thu Sep  7 13:53:02 CDT 2017
N=1000
make initial interval: cpu: 0.865497s, wall: 0.596823s
tighten it: cpu: 34.689715s, wall: 34.713636s
calculate lo2, hi2:
cpu: 0.065128s, wall: 442.184503s
	Core.run:
cpu: 35.620504s, wall: 477.495054s

real	7m57.517s
user	47m2.544s
sys	0m2.721s
Thu Sep  7 14:00:59 CDT 2017

...............

Reverting to no Parmap, i.e. make_bounds_mat1:
~/docs/src/ml/imp(master)$ date; time _build/default/src/bin/setchaintest.exe 1000; date
Thu Sep  7 14:00:59 CDT 2017
N=1000
make initial interval: cpu: 0.877895s, wall: 0.606439s
tighten it: cpu: 32.903994s, wall: 32.904554s
calculate lo2, hi2: cpu: 1938.218062s, wall: 8237.634971s
cpu: 1972.000079s, wall: 8271.146047s

real	137m51.168s
user	32m47.714s
sys	0m4.318s
Thu Sep  7 16:18:51 CDT 2017

[OK, those are before and after (or rather after and before) times
in which there is a huge overall difference.  8 minutes with Parmap,
2-1/2 hours without, a ratio of 17.25 for overall runtime, and 18.75X
for that one function.  Wow.  Thanks Parmap!]

----------------------
MBP with Parmap and without:

~/docs/src/ml/imp(master)$ date ; _build/default/src/bin/setchaintest.exe 1000; date
Fri Sep  8 11:14:54 CDT 2017
N=1000

make initial interval: cpu: 0.886070s, wall: 0.619621s
tighten it: cpu: 33.392279s, wall: 33.393520s

calculate lo2, hi2 using Parmap, using make_bounds_mat4: cpu: 0.070257s, wall: 424.630305s

calculate lo2, hi2 without Parmap using make_bounds_mat3: cpu: 1712.451286s, wall: 5737.566875s

Results of both calculations are the same? true
Ratio between make_bounds_mat4 and make_bounds_mat3 wall times ~= 13.511902

Extra check: calculate lo2, hi2 without Parmap using (earlier) make_bounds_mat1: cpu: 1720.531376s, wall: 6459.017996s

Results are the same? true

Overall time:
cpu: 3467.339869s, wall: 12655.236911s
Fri Sep  8 14:45:49 CDT 2017

-------------------------
MBP at git commit c16dab6

~/docs/src/ml/imp(master)$ _build/default/src/bin/setchaintest.exe 1000
N=1000

make initial interval: cpu: 0.863182s, wall: 0.595229s
tighten it: cpu: 33.839317s, wall: 33.845300s

calculate lo2, hi2 using Parmap, using make_bounds_mat4: cpu: 0.069711s, wall: 394.275939s

calculate lo2, hi2 without Parmap using make_bounds_mat3: cpu: 1741.425243s, wall: 7122.256252s

Results of both calculations are the same? true
Ratio between make_bounds_mat4 and make_bounds_mat3 wall times ~= 18.064140

Overall time:
cpu: 1776.204222s, wall: 7550.979390s

========================
Comparing the mat4 version with the same except using a revised
recombine function
[I'm getting 30-40% improvement on MBA with small matrices (<= 400x400)
but below we have a 50% improvement on a 1000x1000 matrix.  or put
differently, this is a 2X speedup.  I would suspect that the bigger the 
matrix, the more the new algorithm helps, so if I ever go to larger ones,
it might help more.]


~/docs/src/ml/imp(master)$ _build/default/src/bin/setchaintest.exe 1000
N=1000

make initial interval: cpu: 0.865285s, wall: 0.598718s
tighten it: cpu: 32.982244s, wall: 32.987595s

calculate lo2, hi2 using Parmap, using make_bounds_mat4: cpu: 0.076868s, wall: 392.584228s

calculate lo2, hi2 with new recombine algorithm: cpu: 0.064255s, wall: 192.421106s

Results of both calculations are the same? false
diffs:
 -0.0000000000000001032820580828481524786118733965564802474829911738823940
-0.0000000000000303376886397308150045137864481148426420986652374267578125
Ratio ~= 0.490140

Overall time:
cpu: 34.002852s, wall: 618.605792s

============================================
Direct comparison of native and bytecode executables on MBA using
Parmap with each (git commit 8a673b5, 9/13/2017)
Summary: On small N, native code is 2-3X faster.

~/docs/src/ml/imp/_build/default/src/bin(master)*$ time ./setchaintest.exe 200
N=200

make initial interval: cpu: 0.090938s, wall: 0.056915s
tighten it: cpu: 0.192116s, wall: 0.110117s

calculate lo2, hi2: cpu: 0.039276s, wall: 7.862371s

Overall time:
cpu: 0.322889s, wall: 8.029953s

real	0m8.078s
user	0m15.000s
sys	0m0.306s
~/docs/src/ml/imp/_build/default/src/bin(master)*$ time ./setchaintest.bc 200
N=200

make initial interval: cpu: 0.104946s, wall: 0.109268s
tighten it: cpu: 0.289372s, wall: 0.296000s

calculate lo2, hi2: cpu: 0.060670s, wall: 21.134923s

Overall time:
cpu: 0.455491s, wall: 21.540708s

real	0m23.742s
user	0m42.552s
sys	0m0.700s
~/docs/src/ml/imp/_build/default/src/bin(master)*$ time ./setchaintest.exe 300
N=300

make initial interval: cpu: 0.256737s, wall: 0.137042s
tighten it: cpu: 0.317037s, wall: 0.304283s

calculate lo2, hi2: cpu: 0.066700s, wall: 28.021989s

Overall time:
cpu: 0.641098s, wall: 28.463746s

real	0m28.516s
user	0m53.250s
sys	0m0.631s
~/docs/src/ml/imp/_build/default/src/bin(master)*$ time ./setchaintest.bc 300
N=300

make initial interval: cpu: 0.239196s, wall: 0.243882s
tighten it: cpu: 0.697073s, wall: 0.703823s

calculate lo2, hi2: cpu: 0.081037s, wall: 74.106956s

Overall time:
cpu: 1.017735s, wall: 75.055104s

real	1m17.252s
user	2m23.376s
sys	0m1.184s

